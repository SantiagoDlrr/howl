generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String       @id @default(cuid())
  name           String?
  email          String?      @unique
  emailVerified  DateTime?
  image          String?
  microsoftId    String?
  hashedPassword String?
  accounts       Account[]
  posts          Post[]
  sessions       Session[]
  consultant     consultant[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model address {
  id         Int      @id @default(autoincrement())
  street     String?  @db.VarChar(255)
  city       String?  @db.VarChar(100)
  state      String?  @db.VarChar(100)
  country    String?  @db.VarChar(100)
  company_id Int?     @unique
  company    company? @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model administration {
  administrator_id                                       Int
  administrated_id                                       Int
  consultant_administration_administrated_idToconsultant consultant @relation("administration_administrated_idToconsultant", fields: [administrated_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  consultant_administration_administrator_idToconsultant consultant @relation("administration_administrator_idToconsultant", fields: [administrator_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([administrator_id, administrated_id])
}

model call_emotions {
  call_id    Int
  emotion_id Int
  calls      calls    @relation(fields: [call_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  emotions   emotions @relation(fields: [emotion_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([call_id, emotion_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model calls {
  id                  Int             @id(map: "call_pkey") @default(autoincrement())
  context             String?
  satisfaction        Int?
  duration            Int
  summary             String?
  date                DateTime        @db.Date
  transcript          String?
  main_ideas          String[]
  type                String?         @db.VarChar(50)
  consultant_id       Int
  client_id           Int
  feedback            String?
  sentiment_analysis  String?
  risk_words          String[]
  output              String?
  diarized_transcript Json?           @db.Json
  name                String?
  call_emotions       call_emotions[]
  client              client          @relation(fields: [client_id], references: [id], onUpdate: NoAction, map: "call_client_id_fkey")
  consultant          consultant      @relation(fields: [consultant_id], references: [id], onUpdate: NoAction, map: "call_consultant_id_fkey")
}

model client {
  id              Int               @id @default(autoincrement())
  firstname       String            @db.VarChar(100)
  lastname        String            @db.VarChar(100)
  email           String            @unique @db.VarChar(255)
  company_id      Int?
  calls           calls[]
  company         company?          @relation(fields: [company_id], references: [id], onUpdate: NoAction)
  client_feedback client_feedback[]
}

model client_feedback {
  id                      Int         @id @default(autoincrement())
  timestamp               DateTime    @db.Timestamp(6)
  consultant_satisfaction Int?
  consultant_feedback     String?
  call_satisfaction       Int?
  agent_id                Int?
  client_id               Int?
  consultant              consultant? @relation(fields: [agent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  client                  client?     @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([client_id, timestamp])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model company {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(100)
  client_since DateTime @db.Date
  satisfaction Int?
  address      address?
  client       client[]
}

model consultant {
  id                                                         Int               @id @default(autoincrement())
  firstname                                                  String            @db.VarChar(100)
  lastname                                                   String            @db.VarChar(100)
  email                                                      String            @unique @db.VarChar(255)
  rating                                                     Float?
  user_id                                                    String?
  administration_administration_administrated_idToconsultant administration[]  @relation("administration_administrated_idToconsultant")
  administration_administration_administrator_idToconsultant administration[]  @relation("administration_administrator_idToconsultant")
  calls                                                      calls[]
  client_feedback                                            client_feedback[]
  User                                                       User?             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_id")
  supervision_supervision_supervised_idToconsultant          supervision[]     @relation("supervision_supervised_idToconsultant")
  supervision_supervision_supervisor_idToconsultant          supervision[]     @relation("supervision_supervisor_idToconsultant")
}

model emotions {
  id            Int             @id @default(autoincrement())
  name          String          @unique @db.VarChar(100)
  call_emotions call_emotions[]
}

model supervision {
  supervisor_id                                    Int
  supervised_id                                    Int
  consultant_supervision_supervised_idToconsultant consultant @relation("supervision_supervised_idToconsultant", fields: [supervised_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_supervised_id")
  consultant_supervision_supervisor_idToconsultant consultant @relation("supervision_supervisor_idToconsultant", fields: [supervisor_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([supervisor_id, supervised_id])
}
